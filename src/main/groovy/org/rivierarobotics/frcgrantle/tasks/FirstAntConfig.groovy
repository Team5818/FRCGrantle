package org.rivierarobotics.frcgrantle.tasks

import org.gradle.api.DefaultTask
import org.gradle.api.artifacts.Configuration
import org.gradle.api.artifacts.Dependency
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.InputFiles
import org.gradle.api.tasks.Internal
import org.gradle.api.tasks.OutputFile
import org.gradle.api.tasks.TaskAction
import org.rivierarobotics.frcgrantle.SSExtension

import static org.rivierarobotics.frcgrantle.Const.FRC_COMPILE

class FirstAntConfig extends DefaultTask {

    private Map<String, Dependency> builtInJars = new HashMap<>()
    private File base = project.file("${project.buildDir}/frclibs")
    private File userLibsDir = new File(base, 'user')
    private File wpilibNativeDir = new File(base, 'wpilib')

    private File buildPropertiesFile = project.file('build.properties');

    {
        group = 'FRC'
    }

    @Input
    File getUserLibsDir() {
        return userLibsDir
    }

    void setUserLibsDir(File userLibsDir) {
        this.userLibsDir = userLibsDir
    }

    void userLibsDir(File userLibsDir) {
        setUserLibsDir(userLibsDir)
    }

    @Input
    File getWpilibNativeDir() {
        return wpilibNativeDir
    }

    void setWpilibNativeDir(File wpilibNativeDir) {
        this.wpilibNativeDir = wpilibNativeDir
    }

    void wpilibNativeDir(File wpilibNativeDir) {
        setWpilibNativeDir(wpilibNativeDir)
    }

    @Internal
    Map<String, Dependency> getBuiltInJars() {
        return builtInJars
    }

    void setBuiltInJars(Map<String, Dependency> builtInJars) {
        this.builtInJars = builtInJars
    }

    @InputFiles
    String getBuiltInJarFiles() {
        return configuration.files(builtInJars.values().toArray(new Dependency[0]))
    }

    @Internal
    Configuration getConfiguration() {
        return project.configurations.getByName(FRC_COMPILE)
    }

    @OutputFile
    File getBuildPropertiesFile() {
        return buildPropertiesFile
    }

    private static void ensureDirectoryExists(File dir) {
        if (!dir.mkdirs() && !dir.isDirectory()) {
            throw new IllegalStateException("Unable to create directory ${dir.absolutePath}")
        }
    }

    @TaskAction
    void configureFirstAnt() {
        def ext = project.extensions.getByType(SSExtension.class)
        ensureDirectoryExists(userLibsDir)
        ensureDirectoryExists(wpilibNativeDir)
        def antProperties = new Properties()
        antProperties['userLibs.dir'] = userLibsDir.absolutePath
        antProperties['wpilib.native.lib'] = wpilibNativeDir.absolutePath

        // grab libraries
        def compile = configuration

        // check resolve
        compile.resolvedConfiguration.rethrowFailure()

        builtInJars.forEach { propKey, dependency ->
            antProperties[propKey + '.jar'] = compile.files(dependency).first().absolutePath
        }

        antProperties['package'] = ext.packageBase
        antProperties['robot.class'] = '${package}.Robot'
        antProperties['team-number'] = String.valueOf(ext.teamNumber)

        buildPropertiesFile.withOutputStream {
            antProperties.store(it, "Generated by FRC Grantle.")
        }
    }

}
